{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","card","name","email","id","alt","src","CardList","robots","cardArray","map","user","i","Card","key","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAuBeA,EAfG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKC,UAAU,OACX,2BACIA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBAGZC,SAAUJ,MCEXK,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAIxB,OACI,yBAAKP,UAAU,uDACX,yBAAKQ,IAAI,SAASC,IAAG,+BAA0BF,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCoBLI,EA7BE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAITC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAC/B,OACI,kBAACC,EAAD,CACIC,IAAKF,EACLR,GAAII,EAAOI,GAAGR,GACdF,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,WAI7B,OACI,6BACKM,ICVGM,G,MARD,SAACC,GACZ,OAEI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,UACtCH,EAAMI,YCgBJC,E,kDAnBX,WAAYL,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,CACTC,UAAW,GAHA,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAW,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,yDAEJG,KAAKV,MAAMI,a,GAhBCQ,aC+FZC,E,kDA9DX,aAAe,IAAD,8BAEV,gBAoBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SApBzC,EAAKZ,MAAQ,CACTd,OAAQ,GACRwB,YAAa,IANP,E,gEAWO,IAAD,OAGhBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAACnB,OAAO+B,S,+BAepC,IAAD,EAC0Bb,KAAKJ,MAA5Bd,EADH,EACGA,OAAQwB,EADX,EACWA,YAGVQ,EAAehC,EAAOiC,QAAO,SAAAC,GAC/B,OAAOA,EAAMxC,KAAKyC,cAAcC,SAASZ,EAAYW,kBAOzD,OAAQnC,EAAOqC,OAGX,yBAAKhD,UAAU,MACX,wBAAIA,UAAU,MAAd,eAGA,kBAAC,EAAD,CAAWD,aAAc8B,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUtB,OAAQgC,OATjC,2C,GA9CSZ,aCtBEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.623e239f.chunk.js","sourcesContent":["import React from 'react'\n\n//\"SearchBox\" accepts \"searchChange\" as \"props\" even though in the App.js it's a \"state\".\n//I now have \"searchChange\" as a function\n//the searchChange function which is a prop is the \"onSearchChange\" function that is defined in the App\n// That's how we communicate with the parent\n//It triggers the event, the parent(App) says \"Oh, run this function\"=======>App.js\n//But now that I have the value of the search input, I can now directly communicate that search input to the \"robots\" list\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                //every time the onchange event is triggered, call the searchChange function\n                //Any time the searchBox changes, on change I'm going to run the function, I'm going to call this function\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react'\n//We're not writing HTML we're writing JSX and we need to import React so that our program understands JSX.\n// This HTML-like syntax\n\nconst card = ({name, email, id}) => {\n   //we're just receiving props and we're destructuring the props right inside of the brackets here\n    //destructing\n    // const { name, email, id} = props;\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default card;","import React from 'react'\nimport Card from \"./Card\";\n\n//\"CardList\" accepts \"robots\" as \"props\" even though in the App.js it's a \"state\".\nconst CardList = ({robots}) => {\n    // if (true) {\n    //     throw new Error('NOOOOOOOOO!');\n    // }\n    const cardArray = robots.map((user,i) => {\n        return  (\n            <Card\n                key={i}\n                id={robots[i].id}\n                name={robots[i].name}\n                email={robots[i].email}\n            />\n        );\n    })\n    return (\n        <div>\n            {cardArray}\n        </div>\n    );\n    // return (\n    //     <div>\n    //         <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n    //         <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n    //         <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n    //         <Card id={robots[3].id} name={robots[3].name} email={robots[3].email}/>\n    //     </div>\n    // );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        // <div style={{ overflowY: 'scroll', border:  '1px solid black', height: '800px'}}>\n        <div style={{ overflowY: 'scroll', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\nexport default  Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({hasError : true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooooops. That is not good</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n// import {robots} from '../robots';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport './App.css';\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\n\n//We have our \"App\" component that has two states - \"robots\" and \"searchfield\"\n//And because \"App\" owns the state, any component that has \"state\" uses the \"class\" syntax\n// so they can use the \"constructor\" function to create \"this.state\",\n// and this \"state\" is what changes in an app. It's what describes the app\n//the virtual DOM is just a javascript object that collects this entire state\n// and React uses this state to render and pass them down as props to these components\n// so that these components that are just pure functions can just render\n//And we always know that the app is going to look the same\n// because they're just simple pure functions\n//We manage this state in here, the app is the only thing that can change this state\n//But it can pass down things such as props,\n// so we passed down \"onSearchChange\" to the \"SearchBox\",\n// and the \"SearchBox\", every time there's an \"onChange\" on the input, it lets the app know\n// \"Hey, there was a change, Run this function\"\n//It runs the function with the event and updates the state of the \"searchfield\" to whatever we type\n//Now with the information that we have from the search box we can now communicate to the card list\n//and tell it \"Hey, I want to filter the \"robots\" state to now have only what includes in the \"searchfield\"\n//and instead of passing that \"this.state.robots\" we just passed the \"filteredRobots\"\n//You might be asking yourself \"Well, \"robots\" never really changes, does it?\"\n//\"We always just create a new array called \"filterRobots\" and we always pass that down\"\n//\"Does this need to be part of the state\"\n//And right now not really, because we just have a hard coded \"robots\",\n// but when we get later on in the course you'll see that that's not the case\n//Most of the time you're getting the users or robots from another place over the internet\n//in which case we will need \"robots\" to change from an empty array to an array after we go and grab all of our users\n\nclass App extends Component {\n    constructor() {\n        //\"super()\" which calls the constructor of component\n        super();\n        //because \"App\" now owns \"state\" that includes \"robots\", it's allowed to change it.\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n        //we have these two values, and ideally in the search box I have something called \"onSearchChange()\"\n    }\n\n    componentDidMount() {\n        //We're just saying make this HTTP request, and fetch receives this.\n        //This is going to receive a response\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            //we're simply updating state after we fetch.\n            .then(users => {this.setState({robots:users})});\n    }\n\n    //\"onSearchChange()\" I want to say that every time the input changes, just like we did with DOM manipulation,\n    //we get an event, and within this event I'm going to \"console.log\" this event\n    onSearchChange = (event) => {\n        //I'm changing the state so that the \"searchfield\" always gets updated\n        this.setState({searchfield: event.target.value})\n\n        //\"event.target.value\" which should give us the value of the search term\n        // console.log(event.target.value)\n        //<======And now this function gets run\n        //But now that I have the value of the search input, I can now directly communicate that search input to the \"robots\" list\n    }\n\n    render() {\n        const { robots, searchfield} = this.state;\n\n        //we're filtering the robots according to the changed \"searchfield\"\n        const filterRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n\n        //this is how you build real apps with react, you have a loading bar, they can just add here,\n        // make requests on componentDidMount() and interact with components.\n        //robots.length === 0\n        //if...else ternary operator\n        return !robots.length?\n         <h1>Loading</h1>:\n         (\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                {/*I want any time this input changes to trigger \"console.log\". So we can pass this actually now.*/}\n                {/*because this is an object we have to say \"this\" so that it says \"this\" (which is the \"App\") \".*/}\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filterRobots}/>\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n// import CardList from './CardList';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n// import { robots } from './robots';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}